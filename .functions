# Create a new directory and enter it
function mkd() {
  mkdir -p "$@" && cd "$_";
}

# Change working directory to the top-most Finder window location
function cdf() { # short for `cdfinder`
  cd "$(osascript -e 'tell app "Finder" to POSIX path of (insertion location as alias)')";
}


# Determine size of a file or total size of a directory
function fs() {
  if du -b /dev/null > /dev/null 2>&1; then
    local arg=-sbh;
  else
    local arg=-sh;
  fi
  if [[ -n "$@" ]]; then
    du $arg -- "$@";
  else
    du $arg .[^.]* *;
  fi;
}

# Use Git’s colored diff when available
hash git &>/dev/null;
if [ $? -eq 0 ]; then
  function diff() {
    git diff --no-index --color-words "$@";
  }
fi;

# Create a data URL from a file
function dataurl() {
  local mimeType=$(file -b --mime-type "$1");
  if [[ $mimeType == text/* ]]; then
    mimeType="${mimeType};charset=utf-8";
  fi
  echo "data:${mimeType};base64,$(openssl base64 -in "$1" | tr -d '\n')";
}

# Run `dig` and display the most useful info
function digga() {
  dig +nocmd "$1" any +multiline +noall +answer;
}

# UTF-8-encode a string of Unicode symbols
function escape() {
  printf "\\\x%s" $(printf "$@" | xxd -p -c1 -u);
  # print a newline unless we’re piping the output to another program
  if [ -t 1 ]; then
    echo ""; # newline
  fi;
}

# Decode \x{ABCD}-style Unicode escape sequences
function unidecode() {
  perl -e "binmode(STDOUT, ':utf8'); print \"$@\"";
  # print a newline unless we’re piping the output to another program
  if [ -t 1 ]; then
    echo ""; # newline
  fi;
}

# Get a character’s Unicode code point
function codepoint() {
  perl -e "use utf8; print sprintf('U+%04X', ord(\"$@\"))";
  # print a newline unless we’re piping the output to another program
  if [ -t 1 ]; then
    echo ""; # newline
  fi;
}

# `vs` with no arguments opens the current directory in Visual Studio Code, otherwise
# opens the given location
function vs() {
  if [ $# -eq 0 ]; then
    code .;
  else
    code "$@";
  fi;
}

# `v` with no arguments opens the current directory in Vim, otherwise opens the
# given location
function v() {
  if [ $# -eq 0 ]; then
    vim .;
  else
    vim "$@";
  fi;
}

# `o` with no arguments opens the current directory, otherwise opens the given
# location
function o() {
  if [ $# -eq 0 ]; then
    open .;
  else
    open "$@";
  fi;
}

# `tre` is a shorthand for `tree` with hidden files and color enabled, ignoring
# the `.git` directory, listing directories first. The output gets piped into
# `less` with options to preserve color and line numbers, unless the output is
# small enough for one screen.
function tre() {
  tree -aC -I '.git|node_modules|bower_components' --dirsfirst "$@" | less -FRNX;
}

# `envsync` syncs the .env file in the project in Dropbox
function envsync() {
  if ! [ -d .git ]; then
    echo "You are not in a Git repository!"
    return
  fi
  local current_project_name=$(cut -d ":" -f 2 <<< `git config --get remote.origin.url`)
  current_project_name="${current_project_name/\//-}.env"

  if [ -L .env ] ; then
    if [ -e .env ] ; then
      echo "Link already set up!"
    else
      echo "" > "$HOME/Dropbox/dotenvs/${current_project_name}"
      echo "Created empty file (link already existed)"
    fi
  elif [ -e .env ] ; then
    mv .env "$HOME/Dropbox/dotenvs/${current_project_name}"
    ln -s "$HOME/Dropbox/dotenvs/${current_project_name}" .env
    echo "Moved .env to Dropbox and created link"
  else
    echo "" > "$HOME/Dropbox/dotenvs/${current_project_name}"
    ln -s "$HOME/Dropbox/dotenvs/${current_project_name}" .env
    echo "Created empty .env file and link"
  fi


  if ! pgrep -x "Dropbox" > /dev/null
  then
    open -a "Dropbox"
    echo "Opened Dropbox"
  fi
}
